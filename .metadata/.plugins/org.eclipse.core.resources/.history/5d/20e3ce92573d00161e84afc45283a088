package org.retailer.gateway.service.impl;

import org.retailer.gateway.service.GatewayService;
import org.retailer.gateway.to.ShopLocationTO;
import org.retailer.gateway.to.ShopResponseTO;
import org.retailer.gateway.to.ShopTO;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.RestTemplate;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import java.util.Map;
import java.util.HashMap;
import org.json.simple.parser.ParseException;

@Service
@Transactional
public class GatewayServiceImpl implements GatewayService{
	
	
	public ShopResponseTO saveShop(String shopName, String  shopAddressNumber, String shopAddressPostcode) throws ParseException
	{
		final String shopManagementUri = "http://localhost:8083/add";
	     
	    RestTemplate restTemplate = new RestTemplate();
	    ShopTO shopTO = new ShopTO();
	    shopTO.setName(shopName);
	    shopTO.setShopAddressNumber(shopAddressNumber);
	    shopTO.setShopAddressPostcode(shopAddressPostcode);
	    ShopTO shopAdded = restTemplate.postForObject(shopManagementUri, shopTO, ShopTO.class);
	    Long shopId = shopAdded.getId();
	    System.out.println("fetched shop id="+shopId);
	    
	    final String shopLocationUri = "http://localhost:8082/addShopLocation/{shopAddressNumber}/{shopAddressPostcode}/{shopId}";

	    Map<String, String> shopLocationServiceParams = new HashMap<String, String>();
	    shopLocationServiceParams.put("shopAddressNumber", shopAddressNumber);
	    shopLocationServiceParams.put("shopAddressPostcode",shopAddressPostcode);
	    shopLocationServiceParams.put("shopId",String.valueOf(shopId));
	     
	    ShopLocationTO shopLocationTO = new ShopLocationTO();
	    ShopLocationTO shopLocationAdded = restTemplate.postForObject(shopLocationUri, shopLocationTO, ShopLocationTO.class, shopLocationServiceParams);
	    
	    ShopResponseTO shopResponseTO = new ShopResponseTO();
	    shopResponseTO.setId(shopId);
	    shopResponseTO.setName(shopName);
	    shopResponseTO.setShopAddressNumber(shopAddressNumber);
	    shopResponseTO.setShopAddressPostcode(shopAddressPostcode);
	    shopResponseTO.setLatitude(shopLocationAdded.getLatitude());
	    shopResponseTO.setLongitude(shopLocationAdded.getLongitude());
	    
		return shopResponseTO;
	}
	
	public ShopResponseTO findNearestShopLocation(String latitude,String longitude)
	{
		final String shopLocationUri = "http://localhost:8082/nearestShop/{latitude}/{longitude}";
		RestTemplate restTemplate = new RestTemplate();

	    Map<String, String> shopLocationServiceParams = new HashMap<String, String>();
	    shopLocationServiceParams.put("latitude", latitude);
	    shopLocationServiceParams.put("longitude",longitude);
	     
	    ShopLocationTO shopLocationTO = restTemplate.getForObject(shopLocationUri, ShopLocationTO.class, shopLocationServiceParams);
	    
	    System.out.println("Fetched Nearest Shop id="+shopLocationTO.getShopId());
	    
	    final String shopServiceUri = "http://localhost:8083/find/{id}";
	    Map<String, String> shopServiceParams = new HashMap<String, String>();
	    shopServiceParams.put("id", String.valueOf(shopLocationTO.getShopId()));
	    
	    ShopTO shopTO = restTemplate.getForObject(shopServiceUri, ShopTO.class, shopServiceParams);
	    
	    ShopResponseTO shopResponseTO = new ShopResponseTO();
	    shopResponseTO.setId(shopTO.getId());
	    shopResponseTO.setLatitude(shopLocationTO.getLatitude());
	    shopResponseTO.setLongitude(shopLocationTO.getLongitude());
	    shopResponseTO.setName(shopTO.getName());
	    shopResponseTO.setShopAddressNumber(shopTO.getShopAddressNumber());
	    shopResponseTO.setShopAddressPostcode(shopTO.getShopAddressPostcode());
	    
	    return shopResponseTO;
	   
	}
	
}
