package org.retailer.shoplocator.domain.service.impl;

import java.io.PrintStream;
import java.util.Iterator;
import org.retailer.helper.*;
import org.retailer.shoplocator.domain.service.ShopLocationService;
import org.retailer.shoplocator.domain.model.ShopLocation;
import org.retailer.shoplocator.domain.repo.ShopLocationRepoImpl;
import org.retailer.shoplocator.domain.ito.ShopLocationITO;
import org.springframework.beans.factory.annotation.Autowired;

// Referenced classes of package org.retailer.shoplocator.service:
//            ShopLocationService

public class ShopLocationServiceImpl
    implements ShopLocationService
{

	@Autowired
    private ShopLocationRepoImpl shopLocationRepository;

    public ShopLocationServiceImpl()
    {
    }

    public ShopLocationVO findNearestShop(String latitude, String longitude)
    {
        System.out.println((new StringBuilder("input latitude=")).append(latitude).toString());
        System.out.println((new StringBuilder("input longitude=")).append(longitude).toString());
        double inputLatitude = Double.parseDouble(latitude);
        double inputLongitude = Double.parseDouble(longitude);
        System.out.println((new StringBuilder("converted input latitude=")).append(latitude).toString());
        System.out.println((new StringBuilder("converted input longitude=")).append(longitude).toString());
        double minimumDistance = -1D;
        ShopLocation nearestShopLocation = null;
        ShopLocationVO nearestShopLocationVO = null;
        for(Iterator shopAddressIter = shopLocationRepository.findAll().iterator(); shopAddressIter.hasNext();)
        {
            System.out.println("Iterating inside findNearestShop()");
            ShopLocation shopLocation = (ShopLocation)shopAddressIter.next();
            System.out.println((new StringBuilder("Verify Iterated Shop Location latitude=")).append(shopLocation.getLatitude()).toString());
            System.out.println((new StringBuilder("Verify Iterated Shop Location longitude=")).append(shopLocation.getLongitude()).toString());
            double distance = DistanceCalculator.distance(inputLatitude, inputLongitude, shopLocation.getLatitude(), shopLocation.getLongitude());
            System.out.println((new StringBuilder("calculated distance=")).append(distance).toString());
            if(distance <= minimumDistance || minimumDistance < 0.0D)
            {
                minimumDistance = distance;
                nearestShopLocation = shopLocation;
                System.out.println((new StringBuilder("Found new near shop location with id=")).append(nearestShopLocation.getShopId()).toString());
            }
        }

        if(nearestShopLocation != null)
        {
            System.out.println((new StringBuilder("nearest shop Id=")).append(nearestShopLocation.getShopId()).toString());
            nearestShopLocationVO = new ShopLocationVO();
            nearestShopLocationVO.setId(nearestShopLocation.getId());
            nearestShopLocationVO.setShopId(nearestShopLocation.getShopId());
            nearestShopLocationVO.setLatitude(nearestShopLocation.getLatitude());
            nearestShopLocationVO.setLongitude(nearestShopLocation.getLongitude());
        }
        return nearestShopLocationVO;
    }

    public ShopLocationVO createShopLocation(String shopAddressNumber, String shopAddressPostcode, long shopId)
        throws Exception
    {
        StringBuilder combinedAddress = new StringBuilder();
        combinedAddress.append(shopAddressNumber);
        combinedAddress.append(" ");
        combinedAddress.append(shopAddressPostcode);
        Location location = null;
        try
        {
            location = LocationHelper.getLatLongPositions(combinedAddress.toString());
        }
        catch(Exception ex)
        {
            throw new Exception("Longitude and Latitude not found for the address.");
        }
        ShopLocation shopLocation = null;
        ShopLocationVO shopLocationVO = null;
        if(location != null)
        {
            shopLocation = new ShopLocation();
            shopLocation.setShopId(shopId);
            shopLocation.setLatitude(location.getLatitude());
            shopLocation.setLongitude(location.getLongitude());
            shopLocationRepository.save(shopLocation);
            shopLocationVO = new ShopLocationVO();
            shopLocationVO.setId(shopLocation.getId());
            shopLocationVO.setShopId(shopLocation.getShopId());
            shopLocationVO.setLatitude(shopLocation.getLatitude());
            shopLocationVO.setLongitude(shopLocation.getLongitude());
        }
        return shopLocationVO;
    }
}
